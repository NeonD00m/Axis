"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[316],{1501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Devices/controller","title":"Controller","description":"Controller support guide","source":"@site/docs/Devices/controller.md","sourceDirName":"Devices","slug":"/Devices/controller","permalink":"/Axis/docs/Devices/controller","draft":false,"unlisted":false,"editUrl":"https://github.com/NeonD00m/axis/edit/main/docs/Devices/controller.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Controller","description":"Controller support guide","sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Desktop","permalink":"/Axis/docs/Devices/desktop"},"next":{"title":"Touch","permalink":"/Axis/docs/Devices/touch"}}');var o=n(4848),s=n(8453);const c={title:"Controller",description:"Controller support guide",sidebar_position:2},a="Controller",i={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"controller",children:"Controller"})}),"\n",(0,o.jsxs)(t.p,{children:["If you have taken the time to read through the ",(0,o.jsx)(t.a,{href:"../../api/Axis",children:"API"}),", you may have noticed that most methods have a ",(0,o.jsx)(t.code,{children:"controller"})," parameter with the type of ",(0,o.jsx)(t.code,{children:"number?"}),'. Roblox supports up to 8 "gamepads" and as such, your game may experience up to 8 controllers (and you may want to support this by having different input axes for each controller).']}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-lua",children:"local jump = Axis.input {\r\n    Enum.KeyCode.Space, -- any other inputs will be treated as controller 1\r\n    Enum.KeyCode.ButtonA,\r\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"In this example, let's say that we let 8 players play locally, each with their own character who may want to jump for whatever reason. You may write a system like this to handle each character:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-lua",children:"local function jump()\r\n    for i = 1, 8 do\r\n        -- if standing on the ground ...\r\n        if jump:pressed(i) then\r\n            -- make their character jump\r\n        end\r\n    end\r\nend\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Remember that you can use ",(0,o.jsx)(t.a,{href:"https://create.roblox.com/docs/reference/engine/classes/UserInputService#GetConnectedGamepads",children:(0,o.jsx)(t.code,{children:"UserInputService:GetConnectedGamepads()"})})," to get the number of connected controllers."]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(t.p,{children:["Almost all methods allow you to specify a controller like this, even ",(0,o.jsx)(t.code,{children:"move()"}),", ",(0,o.jsx)(t.code,{children:"hold()"}),", and ",(0,o.jsx)(t.code,{children:"read()"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function c(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);